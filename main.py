
import telebot
from telebot import types
import psycopg2

token = '5785935703:AAFHBmB5TGi9zxQZvOTEokQzifbBfJIKGWA'
bot = telebot.TeleBot(token)

def make_conn():
    conn = psycopg2.connect(
        database="task_manager",
        user="postgres",
        password="111200209",
        host="localhost"
    )
    return conn

def create_table(user_id):
    conn = make_conn()
    curr = conn.cursor()

    query = f"""
    CREATE TABLE IF NOT EXISTS tasks_{user_id} (
        id SERIAL PRIMARY KEY,
        title VARCHAR(25),
        due_date DATE,
        priority INTEGER
    );
    """
    curr.execute(query)
    conn.commit()

    curr.close()
    conn.close()

def add_task_to_db(user_id, task_description, deadline, priority):
    conn = make_conn()
    curr = conn.cursor()

    query = f"""
    INSERT INTO tasks_{user_id} (title, due_date, priority)
    VALUES (%s, %s, %s);
    """
    curr.execute(query, (task_description, deadline, priority))
    conn.commit()

    curr.close()
    conn.close()

def get_tasks_from_db(user_id):
    conn = make_conn()
    curr = conn.cursor()

    query = f"SELECT * FROM tasks_{user_id} ORDER BY due_date;"
    curr.execute(query)
    tasks = curr.fetchall()

    curr.close()
    conn.close()

    return tasks

def delete_task_from_db(user_id, task_id):
    conn = make_conn()
    curr = conn.cursor()

    query = f"DELETE FROM tasks_{user_id} WHERE id = %s;"
    curr.execute(query, (task_id,))
    conn.commit()

    curr.close()
    conn.close()

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    create_table(user_id)
    keyboard = types.ReplyKeyboardMarkup(True)
    keyboard.row('‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏')
    keyboard.row('‚è∞ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏', '‚≠êÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É')
    keyboard.row('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
    
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üòä –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=keyboard)

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, '‚è∞ –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –≤–∞–∂–Ω—ã–µ –≤–µ—â–∏')

@bot.message_handler(func=lambda message: message.text == '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
def add_task(message):
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:')
    bot.register_next_step_handler(message, add_task_description)

def add_task_description(message):
    task_description = message.text
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ (–ì–ì–ì–ì-–ú–ú-–î–î):')
    bot.register_next_step_handler(message, add_task_deadline, task_description)

def add_task_deadline(message, task_description):
    deadline = message.text.strip()
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–æ—Ç 1 –¥–æ 5):')
    bot.register_next_step_handler(message, add_task_priority, task_description, deadline)

def add_task_priority(message, task_description, deadline):
    priority = message.text.strip()
    user_id = message.from_user.id
    add_task_to_db(user_id, task_description, deadline, priority)
    bot.send_message(message.chat.id, '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!‚úÖ')

@bot.message_handler(func=lambda message: message.text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏')
def show_tasks(message):
    user_id = message.from_user.id
    tasks = get_tasks_from_db(user_id)
    if len(tasks) > 0:
        response = '–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n'
        for index, task in enumerate(tasks):
            response += f'{index+1}. –û–ø–∏—Å–∞–Ω–∏–µ: {task[1]}, –°—Ä–æ–∫: {task[2]}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task[3]}\n'
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.')

@bot.message_handler(func=lambda message: message.text == '‚è∞ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏')
def sort_by_time(message):
    user_id = message.from_user.id
    tasks = get_tasks_from_db(user_id)
    if len(tasks) > 0:
        sorted_tasks = sorted(tasks, key=lambda x: x[2])
        response = '–ó–∞–¥–∞—á–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏:\n'
        for index, task in enumerate(sorted_tasks):
            response += f'{index+1}. –û–ø–∏—Å–∞–Ω–∏–µ: {task[1]}, –°—Ä–æ–∫: {task[2]}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task[3]}\n'
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.')

@bot.message_handler(func=lambda message: message.text == '‚≠êÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É')
def sort_by_priority(message):
    user_id = message.from_user.id
    tasks = get_tasks_from_db(user_id)
    if len(tasks) > 0:
        sorted_tasks = sorted(tasks, key=lambda x: x[3])
        response = '–ó–∞–¥–∞—á–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:\n'
        for index, task in enumerate(sorted_tasks):
            response += f'{index+1}. –û–ø–∏—Å–∞–Ω–∏–µ: {task[1]}, –°—Ä–æ–∫: {task[2]}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task[3]}\n'
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.üò∂')
        
@bot.message_handler(func=lambda message: message.text.startswith('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'))
def delete_task(message):
    user_id = message.from_user.id
    tasks = get_tasks_from_db(user_id)
    if len(tasks) > 0:
        response = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n'
        for task in tasks:
            response += f'ID: {task[0]}, –û–ø–∏—Å–∞–Ω–∏–µ: {task[1]}, –°—Ä–æ–∫: {task[2]}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task[3]}\n'
        bot.send_message(message.chat.id, response)
        bot.register_next_step_handler(message, delete_task_confirm)
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.')

def delete_task_confirm(message):
    task_id_text = message.text.strip()
    if task_id_text:
        try:
            task_id = int(task_id_text)
            user_id = message.from_user.id
            delete_task_from_db(user_id, task_id)
            bot.reply_to(message, '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
        except ValueError:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞—á–∏.')
    else:
        bot.reply_to(message, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∑–∞–¥–∞—á–∏.')
        
@bot.message_handler(func=lambda message: True)
def handle_all_other_messages(message):
    if message.text.startswith('/') and not message.text.startswith('/start') and not message.text.startswith('/help'):
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.‚òπÔ∏è')
    else:
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.‚òπÔ∏è')

bot.polling(none_stop=True)
